[16th Mar 2004] {{{1
(*) cpp_set {{{2
    (*) <m-b> -> boost::
    (*) <m-l> -> luc_lib::
    (*) <localleader>ns -> "namespace{\n}" around bloc/line

[13th Jan 2004] {{{1
(*) c_sep, cpp_set {{{2
    (*) Def_Abbr_C() simplified => only two parameters now
       => Bug happening when loading the control-structure abbreviations fixed
    (*) Using InsertAroundVisual() instead of the old MapAroundVisualLine
(*) cpp_set        {{{2
    (*) the abbreviations (if, for, switch, while) don't mess the search
        history anymore.

[25th Sep 2003] {{{1
(*) c_set {{{2
    (*) the abbreviations (if, for, switch, while) don't mess the search
        history anymore.

[26th Aug 2003] {{{1
(*) c_set, cpp_set {{{2
    (*) visual mappings behave correctly, even in select-mode (:h gV)
(*) bracketing.base.vim {{{2
    (*) New option: [bg]:marker_center
    (*) New mappings: !jump-and-del! !bjump-and-del!
        -> Always jump and delete the next/previous markers, whatever the
	options are.

[28th Jul 2003] {{{1
(*) cpp_options, c_set {{{2
    (*) b:nl_before_xxx changed into g:c_nl_before_xxx
(*) cpp_InsertAccessors {{{2
    (*) respects g:c_nl_before_curlyB
	But the definition of g:c_nl_before_curlyB must be done into
	./cpp_options.vim.
    (*) new option: g:accessorCap that enables to tune the capitalization of
        the first letter of the attribute within accessor-names.
	-1 (lowcase), 0 (no change), 1 (upcase)
    (*) new options: g:accessor_comment_{get,set,ref},
                     g:accessor_comment_proxy_{get,set,ref}
	=> customize the comments written for the various accessors.
	Note: the comment may be an empty string

(*) cpp_InsertAccessors, cpp_BuildTemplate, cpp_GotoFunctionImpl {{{2
    (*) bug fixed regarding automatic !jump! and µTemplate

[20th Jul 2003] {{{1
(*) misc_map.vim {{{2
    (*) doxygen comments are correctly recognized as comments.

[12th Jul 2003] {{{1
(*) doxygen.vim {{{2
    (*) Michael Geddes's syntax file has been move to: {rtp}/syntax/
(*) c_set.vim {{{2
    (*) Loads: doxygen.vim
(*) cpp_options.vim {{{2
    (*) comments added regarding b:nl_before_bracket
        [I know, it is not unique to C++ but concerns C as well]

[03rd Jul 2003 -- 04th Jul 2003] {{{1
(*) c_set {{{2
    (*) fix: the documentation wasn't find-able anymore
    (*) Two new boolean options : b:nl_before_bracket and b:nl_before_curlyB
        that specify wheither we require a newline character before the '('
        and the '{' of the various control statements (if, for, while, ...)
	default values: false (0)
(*) cpp_set {{{2
    (*) Small changes in consequence
(*) common_brackets.vim 4.0:  {{{2
    (*) New option: b:cb_jump_on_close that specify weither the mappings for
         the closing brackets are defined or not ; [default: true (1)]
(*) Documentation {{{2
    (*) Updated and minor changes.

(*) todo {{{2
    (*) "imap }" does not work correctly
    (*) the control statements should not mess up the search history
    (*) mutemplate... utf-8 & doc

[... -- 09th Apr 2003] {{{1
(*) Mu-template 0.31 {{{2

(*) Documentation {{{2
    (*) Little changes

[10th oct 2002 -- 18th oct 2002] {{{1
(*) cpp_FindContextClass.vim {{{2
    (*) Cpp_CurrentScope(l,'class') supports: 
	- inheritance -> 'class A : xx B, xx C ... {'
	- and declaration on several lines of the previous inheritance text.
    (*) Cpp_SearchClassDefinition becomes obsolete. Instead, use
	Cpp_CurrentScope(lineNo, scope_type) to search for a namespace::class
	scope.
    (*) Functions that will return the list of the direct base classes of the
	current class.
    (*) Able to handle C-definitions like:
	    "typedef struct foo{...} *PFoo,Foo;"
    (*) An inversion problem, with nested classes, fixed.

(*) cpp_GotoFunctionImpl 0.6 {{{2
    (*) Supports destructors
    (*) Supports namespaces: 
	+ If the zone where the function implementation is going to be
	  inserted is within a namespace, then the scope of the function
	  will be corrected.
	+ The |search-implementation| feature is able to differentiate
	  functions according to the namespace they are within, and thus
	  it is able to jump to the right function. For instance:
	    int NS::CL::FN(int i) {}		// is NS::CL::FN
	    namespace NS0 {
		int NS::CL::FN(int i) {}	// is NS0::NS::CL:FN
	    }
    (*) Checks whether the function is a pure virtual method and refuse to
	define an implementation in such cases ...
    (*) When searching for the implementation of a function within the
	.cpp file, comments before the signature will be ignored ; i.e.
	the cursor will move to the return-type. The difference is
	noticeable on virtual or static functions.
(*) cpp_GotoFunctionImpl 0.5 {{{2
    (*) The management of cpp_options.vim has been moved to another file.  
    (*) Comments are completly ignored when searching for the implementation
	of a function. Actually, the match is done according to the list of
	type only -- even parameter names will be ignored.
    (*) Inlines functions (within the class def) (ie not prototypes) will be
        ignored
    (*) Enhancements and little bug corrections regaring default parameters
    (*) We can specify where we want the default implementation code to be
	written ; cf cpp_options.vim and g:cpp_FunctionPosition.

(*) cpp_InsertAccessors.vim {{{2
    (*) The management of cpp_options.vim has been moved to another file.  

(*) cpp_options-commands.vim 1.0 {{{2
    (*) New file that will centralize options management

(*) Mu-template 0.23 {{{2
    (*) New global boolean ([0]/1) option:
	g:mt_IDontWantTemplatesAutomaticallyInserted that forbids mu-template
	to automatically insert templates when opening new files.
	Must be set once before mu-template.vim is sourced -> .vimrc

(*) Documentation {{{2
    (*) Updated
    (*) New sections: first steps, C++-options, ...

}}}1
==================================================================
vim600: set fdm=marker:
